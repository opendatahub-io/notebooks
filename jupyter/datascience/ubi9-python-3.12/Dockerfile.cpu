#########################
# configuration args    #
#########################
ARG BASE_IMAGE

######################################################
# mongocli-builder (build stage only, not published) #
######################################################
FROM registry.access.redhat.com/ubi9/go-toolset:latest AS mongocli-builder

ARG MONGOCLI_VERSION=2.0.4

WORKDIR /tmp/

ARG TARGETARCH

# Keep s390x special-case from original (create dummy binary) but
# include explicit curl/unzip steps from the delta for non-s390x.
RUN arch="${TARGETARCH:-$(uname -m)}" && \
    arch=$(echo "$arch" | cut -d- -f1) && \
    if [ "$arch" = "s390x" ]; then \
        echo "Skipping mongocli build for ${arch}, creating dummy binary"; \
        mkdir -p /tmp && echo -e '#!/bin/sh\necho "mongocli not supported on s390x"' > /tmp/mongocli && \
        chmod +x /tmp/mongocli; \
    else \
        echo "Building mongocli for ${arch}"; \
        curl -Lo mongodb-cli-mongocli-v${MONGOCLI_VERSION}.zip https://github.com/mongodb/mongodb-cli/archive/refs/tags/mongocli/v${MONGOCLI_VERSION}.zip && \
        unzip ./mongodb-cli-mongocli-v${MONGOCLI_VERSION}.zip && \
        cd ./mongodb-cli-mongocli-v${MONGOCLI_VERSION}/ && \
        CGO_ENABLED=1 GOOS=linux GOARCH=${arch} GO111MODULE=on go build -a -tags strictfipsruntime -o /tmp/mongocli ./cmd/mongocli/; \
    fi

####################
# cpu-base         #
####################
FROM ${BASE_IMAGE} AS cpu-base

WORKDIR /opt/app-root/bin

# OS Packages needs to be installed as root
USER root
ARG TARGETARCH

# Inject the official UBI 9 repository configuration into the AIPCC base image.
# The Quay-based AIPCC image is "repo-less" by default (https://gitlab.com/redhat/rhel-ai/core/base-images/app#repositories), so dnf cannot upgrade or install packages.
# By copying ubi.repo from the public UBI 9 image, we enable package management for upgrades and installations.
COPY --from=registry.access.redhat.com/ubi9/ubi /etc/yum.repos.d/ubi.repo /etc/yum.repos.d/ubi.repo

# upgrade first to avoid fixable vulnerabilities begin
RUN dnf -y upgrade --refresh --best --nodocs --noplugins --setopt=install_weak_deps=0 --setopt=keepcache=0 \
    && dnf clean all -y
# upgrade first to avoid fixable vulnerabilities end

# Install useful OS packages
RUN --mount=type=cache,target=/var/cache/dnf \
    echo "Building for architecture: ${TARGETARCH}" && \
    if [ "$TARGETARCH" = "s390x" ]; then \
        PACKAGES="perl mesa-libGL skopeo gcc gcc-c++ make openssl-devel autoconf automake libtool cmake python3-devel pybind11-devel openblas-devel unixODBC-devel"; \
    else \
        PACKAGES="perl mesa-libGL skopeo"; \
    fi && \
    echo "Installing: $PACKAGES" && \
    dnf install -y $PACKAGES && \
    dnf clean all && rm -rf /var/cache/yum

RUN if [ "$TARGETARCH" = "s390x" ]; then \
    # Install Rust and set up environment
    mkdir -p /opt/.cargo && \
    export HOME=/root && \
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -o rustup-init.sh && \
    chmod +x rustup-init.sh && \
    CARGO_HOME=/opt/.cargo HOME=/root ./rustup-init.sh -y --no-modify-path && \
    rm -f rustup-init.sh && \
    chown -R 1001:0 /opt/.cargo && \
    # Set environment variables
    echo 'export PATH=/opt/.cargo/bin:$PATH' >> /etc/profile.d/cargo.sh && \
    echo 'export CARGO_HOME=/opt/.cargo' >> /etc/profile.d/cargo.sh && \
    echo 'export GRPC_PYTHON_BUILD_SYSTEM_OPENSSL=1' >> /etc/profile.d/cargo.sh; \
fi

# Set python alternatives only for s390x (not needed for other arches)
RUN if [ "$TARGETARCH" = "s390x" ]; then \
    alternatives --install /usr/bin/python python /usr/bin/python3.12 1 && \
    alternatives --install /usr/bin/python3 python3 /usr/bin/python3.12 1 && \
    python --version && python3 --version; \
fi

# Other apps and tools installed as default user
USER 1001

# Install micropipenv and uv to deploy packages from requirements.txt begin
RUN pip install --no-cache-dir -U "micropipenv[toml]==1.9.0" "uv==0.8.12"
# Install micropipenv and uv to deploy packages from requirements.txt end

# Install the oc client begin
RUN curl -L https://mirror.openshift.com/pub/openshift-v4/$(uname -m)/clients/ocp/stable/openshift-client-linux.tar.gz \
        -o /tmp/openshift-client-linux.tar.gz && \
    tar -xzvf /tmp/openshift-client-linux.tar.gz oc && \
    rm -f /tmp/openshift-client-linux.tar.gz
# Install the oc client end

##############################
# wheel-builder stage        #
# NOTE: Only used in s390x
##############################
FROM cpu-base AS s390x-builder

ARG TARGETARCH
USER 0
WORKDIR /tmp/build-wheels

# Build pyarrow optimized for s390x
RUN --mount=type=cache,target=/root/.cache/pip \
    --mount=type=cache,target=/root/.cache/dnf \
    if [ "$TARGETARCH" = "s390x" ]; then \
        # Install build dependencies (shared for pyarrow and onnx)
        dnf install -y cmake make gcc-c++ pybind11-devel wget && \
        dnf clean all && \
        # Build and collect pyarrow wheel
        git clone --depth 1 https://github.com/apache/arrow.git && \
        cd arrow/cpp && \
        mkdir release && cd release && \
        cmake -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_INSTALL_PREFIX=/usr/local \
              -DARROW_PYTHON=ON \
              -DARROW_PARQUET=ON \
              -DARROW_ORC=ON \
              -DARROW_FILESYSTEM=ON \
              -DARROW_JSON=ON \
              -DARROW_CSV=ON \
              -DARROW_DATASET=ON \
              -DARROW_DEPENDENCY_SOURCE=BUNDLED \
              -DARROW_WITH_LZ4=OFF \
              -DARROW_WITH_ZSTD=OFF \
              -DARROW_WITH_SNAPPY=OFF \
              -DARROW_BUILD_TESTS=OFF \
              -DARROW_BUILD_BENCHMARKS=OFF \
              .. && \
        make -j$(nproc) VERBOSE=1 && \
        make install -j$(nproc) && \
        cd ../../python && \
        pip install --no-cache-dir -r requirements-build.txt && \
        PYARROW_WITH_PARQUET=1 \
        PYARROW_WITH_DATASET=1 \
        PYARROW_WITH_FILESYSTEM=1 \
        PYARROW_WITH_JSON=1 \
        PYARROW_WITH_CSV=1 \
        PYARROW_PARALLEL=$(nproc) \
        python setup.py build_ext --build-type=release --bundle-arrow-cpp bdist_wheel && \
        mkdir -p /tmp/wheels && \
        cp dist/pyarrow-*.whl /tmp/wheels/ && \
        chmod -R 777 /tmp/wheels && \
        # Ensure wheels directory exists and has content
        ls -la /tmp/wheels/; \
    else \
        # Create empty wheels directory for non-s390x
        mkdir -p /tmp/wheels; \
    fi

####################
# jupyter-minimal #
####################
FROM cpu-base AS jupyter-minimal

ARG JUPYTER_REUSABLE_UTILS=jupyter/utils
ARG MINIMAL_SOURCE_CODE=jupyter/minimal/ubi9-python-3.12

WORKDIR /opt/app-root/bin

COPY ${JUPYTER_REUSABLE_UTILS} utils/
COPY ${MINIMAL_SOURCE_CODE}/start-notebook.sh ./

USER 0

# Dependencies for PDF export begin
RUN ./utils/install_pdf_deps.sh
ENV PATH="/usr/local/texlive/bin/linux:/usr/local/pandoc/bin:$PATH"
# Dependencies for PDF export end

USER 1001

WORKDIR /opt/app-root/src

ENTRYPOINT ["start-notebook.sh"]


########################
# jupytyer-datascience #
########################
FROM jupyter-minimal AS jupyter-datascience

ARG DATASCIENCE_SOURCE_CODE=jupyter/datascience/ubi9-python-3.12
ARG TARGETARCH

LABEL name="odh-notebook-jupyter-datascience-ubi9-python-3.12" \
    summary="Jupyter data science notebook image for ODH notebooks" \
    description="Jupyter data science notebook image with base Python 3.12 builder image based on UBI9 for ODH notebooks" \
    io.k8s.display-name="Jupyter data science notebook image for ODH notebooks" \
    io.k8s.description="Jupyter data science notebook image with base Python 3.12 builder image based on UBI9 for ODH notebooks" \
    authoritative-source-url="https://github.com/opendatahub-io/notebooks" \
    io.openshift.build.commit.ref="main" \
    io.openshift.build.source-location="https://github.com/opendatahub-io/notebooks/tree/main/jupyter/datascience/ubi9-python-3.12" \
    io.openshift.build.image="quay.io/opendatahub/workbench-images:jupyter-datascience-ubi9-python-3.12"

WORKDIR /opt/app-root/bin

# OS Packages needs to be installed as root
USER root

# Install useful OS packages
RUN dnf install -y jq unixODBC postgresql git-lfs libsndfile libxcrypt-compat && dnf clean all && rm -rf /var/cache/yum

# Copy dynamically-linked mongocli built in earlier build stage
COPY --from=mongocli-builder /tmp/mongocli /opt/app-root/bin/

# Other apps and tools installed as default user
USER 1001

# Copy wheels from build stage (s390x only)
COPY --from=s390x-builder /tmp/wheels /tmp/wheels
RUN if [ "$TARGETARCH" = "s390x" ]; then \
    pip install --no-cache-dir /tmp/wheels/*.whl; \
else \
    echo "Skipping wheel install for $TARGETARCH"; \
fi

# Install Python packages and Jupyterlab extensions from requirements.txt
COPY ${DATASCIENCE_SOURCE_CODE}/pylock.toml ./
# Copy Elyra setup to utils so that it's sourced at startup
COPY ${DATASCIENCE_SOURCE_CODE}/setup-elyra.sh ${DATASCIENCE_SOURCE_CODE}/utils ./utils/

RUN --mount=type=cache,target=/root/.cache/pip \
    echo "Installing softwares and packages" && \
    # This may have to download and compile some dependencies, and as we don't lock requirements from `build-system.requires`,
    #  we often don't know the correct hashes and `--require-hashes` would therefore fail on non amd64, where building is common.
    if [ "$TARGETARCH" = "s390x" ]; then \
        # For s390x, we need special flags and environment variables for building packages
        GRPC_PYTHON_BUILD_SYSTEM_OPENSSL=1 \
        CFLAGS="-O3" CXXFLAGS="-O3" \
        uv pip install --strict --no-deps --no-cache --no-config --no-progress \
            --verify-hashes --compile-bytecode --index-strategy=unsafe-best-match \
            --requirements=./pylock.toml; \
    else \
        # This may have to download and compile some dependencies, and as we don't lock requirements from `build-system.requires`,
        # we often don't know the correct hashes and `--require-hashes` would therefore fail on non amd64, where building is common.
        uv pip install --strict --no-deps --no-cache --no-config --no-progress \
            --verify-hashes --compile-bytecode --index-strategy=unsafe-best-match \
            --requirements=./pylock.toml; \
    fi && \
    # setup path for runtime configuration
    mkdir /opt/app-root/runtimes && \
    mkdir /opt/app-root/pipeline-runtimes && \
    # Remove default Elyra runtime-images \
    rm /opt/app-root/share/jupyter/metadata/runtime-images/*.json && \
    # Replace Notebook's launcher, "(ipykernel)" with Python's version 3.x.y \
    sed -i -e "s/Python.*/$(python --version | cut -d '.' -f-2)\",/" \
        /opt/app-root/share/jupyter/kernels/python3/kernel.json && \
    # copy jupyter configuration
    install -D -m 0644 /opt/app-root/bin/utils/jupyter_server_config.py \
      /opt/app-root/etc/jupyter/jupyter_server_config.py && \
    # Disable announcement plugin of jupyterlab \
    jupyter labextension disable "@jupyterlab/apputils-extension:announcements" && \
    # Apply JupyterLab addons \
    /opt/app-root/bin/utils/addons/apply.sh && \
    # Fix permissions to support pip in Openshift environments \
    chmod -R g+w /opt/app-root/lib/python3.12/site-packages && \
    fix-permissions /opt/app-root -P

WORKDIR /opt/app-root/src
