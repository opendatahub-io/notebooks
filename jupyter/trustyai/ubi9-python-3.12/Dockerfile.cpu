#########################
# configuration args    #
#########################
ARG BASE_IMAGE

######################################################
# mongocli-builder (build stage only, not published) #
######################################################
FROM registry.access.redhat.com/ubi9/go-toolset:latest AS mongocli-builder

ARG MONGOCLI_VERSION=2.0.4

WORKDIR /tmp/
RUN curl -Lo mongodb-cli-mongocli-v${MONGOCLI_VERSION}.zip https://github.com/mongodb/mongodb-cli/archive/refs/tags/mongocli/v${MONGOCLI_VERSION}.zip
RUN unzip ./mongodb-cli-mongocli-v${MONGOCLI_VERSION}.zip
RUN cd ./mongodb-cli-mongocli-v${MONGOCLI_VERSION}/ && \
    CGO_ENABLED=1 GOOS=linux go build -a -tags strictfipsruntime -o /tmp/mongocli ./cmd/mongocli/
####################
# wheel-cache-base #
####################
FROM ${BASE_IMAGE} AS whl-cache

USER root
ENV HOME=/root
WORKDIR /root

ARG TRUSTYAI_SOURCE_CODE=jupyter/trustyai/ubi9-python-3.12

COPY ${TRUSTYAI_SOURCE_CODE}/pylock.toml .
COPY ${TRUSTYAI_SOURCE_CODE}/devel_env_setup.sh .

RUN --mount=type=cache,target=/root/.cache/uv \
    pip install --no-cache uv && \
    # the devel script is ppc64le specific - sets up build-time dependencies
    source ./devel_env_setup.sh && \
    # This may have to download and compile some dependencies, and as we don't lock requirements from `build-system.requires`,
    #  we often don't know the correct hashes and `--require-hashes` would therefore fail on non amd64, where building is common.
    UV_LINK_MODE=copy uv pip install --strict --no-deps --refresh --no-config --no-progress --verify-hashes --compile-bytecode --index-strategy=unsafe-best-match --requirements=./pylock.toml

####################
# cpu-base         #
####################
FROM ${BASE_IMAGE} AS cpu-base

WORKDIR /opt/app-root/bin

# OS Packages needs to be installed as root
USER root

# Inject the official UBI 9 repository configuration into the AIPCC base image.
# The Quay-based AIPCC image is "repo-less" by default (https://gitlab.com/redhat/rhel-ai/core/base-images/app#repositories), so dnf cannot upgrade or install packages.
# By copying ubi.repo from the public UBI 9 image, we enable package management for upgrades and installations.
COPY --from=registry.access.redhat.com/ubi9/ubi /etc/yum.repos.d/ubi.repo /etc/yum.repos.d/ubi.repo

# upgrade first to avoid fixable vulnerabilities begin
# Problem: The operation would result in removing the following protected packages: systemd
#  (try to add '--allowerasing' to command line to replace conflicting packages or '--skip-broken' to skip uninstallable packages)
# Solution: --best --skip-broken does not work either, so use --nobest
RUN dnf -y upgrade --refresh --nobest --skip-broken --nodocs --noplugins --setopt=install_weak_deps=0 --setopt=keepcache=0 \
    && dnf clean all -y
# upgrade first to avoid fixable vulnerabilities end

# Install useful OS packages
RUN dnf install -y perl mesa-libGL skopeo && dnf clean all && rm -rf /var/cache/yum

# Other apps and tools installed as default user
USER 1001

# Install micropipenv and uv to deploy packages from requirements.txt begin
RUN pip install --no-cache-dir -U "micropipenv[toml]==1.9.0" "uv==0.8.12"
# Install micropipenv and uv to deploy packages from requirements.txt end

# Install the oc client begin
RUN curl -L https://mirror.openshift.com/pub/openshift-v4/$(uname -m)/clients/ocp/stable/openshift-client-linux.tar.gz \
        -o /tmp/openshift-client-linux.tar.gz && \
    tar -xzvf /tmp/openshift-client-linux.tar.gz oc && \
    rm -f /tmp/openshift-client-linux.tar.gz
# Install the oc client end

####################
# jupyter-minimal #
####################
FROM cpu-base AS jupyter-minimal

ARG JUPYTER_REUSABLE_UTILS=jupyter/utils
ARG MINIMAL_SOURCE_CODE=jupyter/minimal/ubi9-python-3.12

WORKDIR /opt/app-root/bin

COPY ${JUPYTER_REUSABLE_UTILS} utils/
COPY ${MINIMAL_SOURCE_CODE}/start-notebook.sh ./

USER 0

# Dependencies for PDF export begin
RUN ./utils/install_pdf_deps.sh
ENV PATH="/usr/local/texlive/bin/linux:/usr/local/pandoc/bin:$PATH"
# Dependencies for PDF export end

USER 1001

WORKDIR /opt/app-root/src

ENTRYPOINT ["start-notebook.sh"]


########################
# jupyter-datascience #
########################
FROM jupyter-minimal AS jupyter-datascience

ARG DATASCIENCE_SOURCE_CODE=jupyter/datascience/ubi9-python-3.12

WORKDIR /opt/app-root/bin

# OS Packages needs to be installed as root
USER root

# Install useful OS packages
RUN dnf install -y jq unixODBC postgresql git-lfs libsndfile libxcrypt-compat && dnf clean all && rm -rf /var/cache/yum

# Copy dynamically-linked mongocli built in earlier build stage
COPY --from=mongocli-builder /tmp/mongocli /opt/app-root/bin/

# Other apps and tools installed as default user
USER 1001

# Copy Elyra setup to utils so that it's sourced at startup
COPY ${DATASCIENCE_SOURCE_CODE}/setup-elyra.sh ${DATASCIENCE_SOURCE_CODE}/utils ./utils/

WORKDIR /opt/app-root/src

####################
# jupyter-trustyai #
####################
FROM jupyter-datascience AS jupyter-trustyai

ARG DATASCIENCE_SOURCE_CODE=jupyter/datascience/ubi9-python-3.12
ARG TRUSTYAI_SOURCE_CODE=jupyter/trustyai/ubi9-python-3.12

ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib

LABEL name="odh-notebook-jupyter-trustyai-ubi9-python-3.12" \
    summary="Jupyter trustyai notebook image for ODH notebooks" \
    description="Jupyter trustyai notebook image with base Python 3.12 builder image based on UBI9 for ODH notebooks" \
    io.k8s.display-name="Jupyter trustyai notebook image for ODH notebooks" \
    io.k8s.description="Jupyter trustyai notebook image with base Python 3.12 builder image based on UBI9 for ODH notebooks" \
    authoritative-source-url="https://github.com/opendatahub-io/notebooks" \
    io.openshift.build.commit.ref="main" \
    io.openshift.build.source-location="https://github.com/opendatahub-io/notebooks/tree/main/jupyter/trustyai/ubi9-python-3.12" \
    io.openshift.build.image="quay.io/opendatahub/workbench-images:jupyter-trustyai-ubi9-python-3.12"

USER 0

# Install jre that is needed to run the trustyai library
RUN INSTALL_PKGS="java-17-openjdk" && \
    dnf install -y --setopt=tsflags=nodocs $INSTALL_PKGS && \
    dnf -y clean all --enablerepo='*'

# Install Python packages and Jupyterlab extensions from requirements.txt
COPY ${TRUSTYAI_SOURCE_CODE}/pylock.toml ./

# install openblas for ppc64le
RUN --mount=type=cache,from=whl-cache,source=/root/OpenBLAS/,target=/OpenBlas/,rw \
    bash -c ' \
        if [[ $(uname -m) == "ppc64le" ]]; then \
            dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm; \
            dnf install -y libraqm libimagequant; \
            PREFIX=/usr/ make install -C /OpenBlas; \
        fi '

# Install packages and cleanup
# install packages as USER 0 (this will allow us to consume uv cache)
RUN --mount=type=cache,from=whl-cache,source=/wheelsdir/,target=/wheelsdir/,rw \
    --mount=type=cache,target=/root/.cache/uv \
    bash -c ' \
        if [[ $(uname -m) == "ppc64le" ]]; then \
            UV_LINK_MODE=copy uv pip install /wheelsdir/*.whl accelerate --cache-dir /root/.cache/uv; \
        fi '
RUN --mount=type=cache,target=/root/.cache/uv \
    echo "Installing softwares and packages" && \
    # we can ensure wheels are consumed from the cache only by restricting internet access for uv install with '--offline' flag
    UV_LINK_MODE=copy uv pip install --cache-dir /root/.cache/uv --requirements=./pylock.toml && \
    # Note: debugpy wheel availabe on pypi (in uv cache) is none-any but bundles amd64.so files
    #       Build debugpy from source instead
    UV_LINK_MODE=copy uv pip install --no-cache git+https://github.com/microsoft/debugpy.git@v$(grep -A1 '\"debugpy\"' ./pylock.toml | grep -Eo '\b[0-9\.]+\b') && \
    # change ownership to default user (all packages were installed as root and has root:root ownership \
    chown -R 1001:0 /opt/app-root/

USER 1001

RUN # setup path for runtime configuration \
    mkdir /opt/app-root/runtimes && \
    # Remove default Elyra runtime-images \
    rm /opt/app-root/share/jupyter/metadata/runtime-images/*.json && \
    # Replace Notebook's launcher, "(ipykernel)" with Python's version 3.x.y \
    sed -i -e "s/Python.*/$(python --version | cut -d '.' -f-2)\",/" /opt/app-root/share/jupyter/kernels/python3/kernel.json && \
    # copy jupyter configuration
    cp /opt/app-root/bin/utils/jupyter_server_config.py /opt/app-root/etc/jupyter && \
    # Disable announcement plugin of jupyterlab \
    jupyter labextension disable "@jupyterlab/apputils-extension:announcements" && \
    # Apply JupyterLab addons \
    /opt/app-root/bin/utils/addons/apply.sh && \
    # Fix permissions to support pip in Openshift environments \
    chmod -R g+w /opt/app-root/lib/python3.12/site-packages && \
    fix-permissions /opt/app-root -P
