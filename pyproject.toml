# https://docs.astral.sh/uv/concepts/projects/config/
[project]
name = "notebooks"
version = "2025.1"
description = "Open Data Hub / OpenShift AI Notebook / Workbench images, and tests for the same in Python."
readme = "README.md"
package-mode = false
requires-python = ">=3.11,<3.13"

[dependency-groups]

############################
# Python Dependency Groups #
############################

dev = [
    "pre-commit",
    "pyright",
    "ruff",

    "pytest",
    "allure-pytest",
    "pytest-subtests",

    "pyfakefs",
    "pydantic",
    "requests",
    "pyyaml",

    "testcontainers",
    "docker",
    "podman",
    "kubernetes",
    "openshift-python-wrapper",
]

base = [

    "wheel~=0.45.1",
    "setuptools~=78.1.1; python_version == '3.11'",
    "setuptools~=75.8.2; python_version == '3.12'",
]

jupyter-base = [
    "jupyterlab==4.2.7",
    "jupyter-server~=2.15.0",
    "jupyter-server-proxy~=4.4.0",
    "jupyter-server-terminals~=0.5.3",
    "jupyterlab-git~=0.50.1",
    "nbdime~=4.0.2",
    "nbgitpuller~=1.2.2",
]

elyra-base = [
    "odh-elyra==4.2.0",
    "jupyterlab-lsp~=5.1.0",
    "jupyterlab-widgets~=3.0.13",
    "jupyter-resource-usage~=1.1.1",
]

elyra-preferred = [
    "jupyter-bokeh~=4.0.5",
]

elyra-trustyai = [
    "jupyter-bokeh~=3.0.5",
]

db-connectors = [
    "pymongo~=4.11.2",
    "psycopg~=3.2.5",
    "pyodbc~=5.2.0",
    "mysql-connector-python~=9.3.0; python_version == '3.11'",
    "mysql-connector-python~=9.2.0; python_version == '3.12'",
]

# onnxconverter-common ~=1.13.0 required for skl2onnx, as upgraded version is not compatible with protobuf
datascience-base = [
    "boto3~=1.37.8",
    "kafka-python-ng~=2.2.3",
    "kfp~=2.12.1",
    "plotly~=6.0.0",
    "scipy~=1.15.2",
    "skl2onnx~=1.18.0",
    "onnxconverter-common~=1.13.0",
    "codeflare-sdk~=0.29.0; python_version == '3.11'",
    "codeflare-sdk~=0.28.1; python_version == '3.12'",
    "kubeflow-training==1.9.0",
]

datascience-preferred = [
    "matplotlib~=3.10.1",
    "numpy~=2.2.3",
    "pandas~=2.2.3",
    "scikit-learn~=1.6.1",
]

datascience-tensorflow = [
    "matplotlib~=3.10.1",
    "numpy~=1.26.4",
    "pandas~=2.2.3",
    "scikit-learn~=1.6.1",
]

datascience-trustyai = [
    "matplotlib ~=3.6.3",
    "numpy ~=1.24.1",
    "pandas ~=1.5.3",
    "scikit-learn ~=1.2.1"
]

tensorflowcuda= [
    "tensorflow[and-cuda]~=2.18.0",
    "tensorboard~=2.18.0",
    "tf2onnx~=1.16.1",
]
tensorflowrocm = [
    "tensorflow-rocm~=2.14.0.600",
    "tensorboard~=2.14.0",
    "tf2onnx~=1.16.1",
]
pytorchcuda = [
    "tensorboard~=2.19.0",
    "torch==2.6.0",
    "torchvision==0.21.0",
]
pytorchrocm = [
    "tensorboard~=2.18.0",
    "torch==2.6.0",
    "torchvision==0.21.0",
    "pytorch-triton-rocm~=3.2.0",
]
trustyai = [
    "torch==2.6.0",
    "transformers~=4.49.0",
    "datasets~=3.4.1",
    "accelerate~=1.5.2",
    "trustyai~=0.6.1",
]

#########################
# Workbench Image Groups #
#########################

jupyter-minimal-image = [
    { include-group = "dev" },
    { include-group = "base" },
    { include-group = "jupyter-base" },
]

jupyter-datascience-image = [
    { include-group = "dev" },
    { include-group = "base" },
    { include-group = "jupyter-base" },
    { include-group = "elyra-base" },
    { include-group = "elyra-preferred" },
    { include-group = "datascience-base" },
    { include-group = "datascience-preferred" },
    { include-group = "db-connectors" },
]

jupyter-tensorflow-image = [
    { include-group = "dev" },
    { include-group = "base" },
    { include-group = "jupyter-base" },
    { include-group = "elyra-base" },
    { include-group = "elyra-preferred" },
    { include-group = "datascience-base" },
    { include-group = "datascience-tensorflow" },
    { include-group = "db-connectors" },
    { include-group = "tensorflowcuda" },
]

jupyter-tensorflow-rocm-image = [
    { include-group = "dev" },
    { include-group = "base" },
    { include-group = "jupyter-base" },
    { include-group = "elyra-base" },
    { include-group = "elyra-preferred" },
    { include-group = "datascience-base" },
    { include-group = "datascience-tensorflow" },
    { include-group = "db-connectors" },
    { include-group = "tensorflowrocm" },
]

jupyter-pytorch-image = [
    { include-group = "dev" },
    { include-group = "base" },
    { include-group = "jupyter-base" },
    { include-group = "elyra-base" },
    { include-group = "elyra-preferred" },
    { include-group = "datascience-base" },
    { include-group = "datascience-preferred" },
    { include-group = "db-connectors" },
    { include-group = "pytorchcuda" },
]

jupyter-pytorch-rocm-image = [
    { include-group = "dev" },
    { include-group = "base" },
    { include-group = "jupyter-base" },
    { include-group = "elyra-base" },
    { include-group = "elyra-preferred" },
    { include-group = "datascience-base" },
    { include-group = "datascience-preferred" },
    { include-group = "db-connectors" },
    { include-group = "pytorchrocm" },
]

jupyter-trustyai-image = [
    { include-group = "dev" },
    { include-group = "base" },
    { include-group = "jupyter-base" },
    { include-group = "elyra-base" },
    { include-group = "elyra-trustyai" },
    { include-group = "datascience-base" },
    { include-group = "datascience-trustyai" },
    { include-group = "db-connectors" },
    { include-group = "trustyai" },
]

[tool.uv.sources]
torch = [
    { index = "pytorch-cuda", group = "pytorchcuda" },
    { index = "pytorch-cuda", group = "trustyai" },
    { index = "pytorch-rocm", group = "pytorchrocm" },
]
torchvision = [
    { index = "pytorch-cuda", group = "pytorchcuda" },
    { index = "pytorch-rocm", group = "pytorchrocm" },
]
pytorch-triton-rocm = [
    { index = "pytorch-rocm" },
]


[[tool.uv.index]]
name = "pytorch-cuda"
url = "https://download.pytorch.org/whl/cu126"
explicit = true

[[tool.uv.index]]
name = "pytorch-rocm"
url = "https://download.pytorch.org/whl/rocm6.2.4"
explicit = true

[[tool.uv.index]]
name = "pypi"
url = "https://pypi.org/simple/"
explicit = true 

[[tool.uv.dependency-metadata]]
name = "tf2onnx"
version = "1.16.1"
requires-dist = ["protobuf"]

[[tool.uv.dependency-metadata]]
name = "tensorflow-rocm"
version = "2.14.0.600"
requires-dist = [
    "tensorflow-cpu-aws; platform_machine != 'x86_64'",
    "tensorflow-estimator",
    "tensorflow-io-gcs-filesystem",
]

[tool.uv]
package = false
required-environments = [
    "sys_platform == 'linux'"
]

conflicts = [
    [
        { group = "elyra-preferred" },
        { group = "elyra-trustyai" }
    ],
    [
        { group = "elyra-preferred" },
        { group = "trustyai" }
    ],
    [
        { group = "datascience-preferred" },
        { group = "trustyai" },
        { group = "tensorflowcuda" },
    ],
    [
        { group = "datascience-tensorflow" },
        { group = "trustyai" }
    ],
    [
        { group = "datascience-preferred" },
        { group = "datascience-trustyai" },
        { group = "datascience-tensorflow" },
    ],
    [
        { group = "tensorflowcuda" },
        { group = "tensorflowrocm" }, 
        { group = "pytorchcuda" },
        { group = "pytorchrocm" },
        { group = "trustyai" },
    ],
    [
        { group = "tensorflowcuda" },
        { group = "tensorflowrocm" }, 
        { group = "datascience-base" },
    ],
    [
        { group = "tensorflowcuda" },
        { group = "trustyai" },
        { group = "datascience-trustyai" },
    ]
]

# https://github.com/astral-sh/uv/issues/3957#issuecomment-2659350181
[build-system]
requires = ["uv-build"]
build-backend = "uv_build"

# inspired from https://github.com/red-hat-data-services/ods-ci/blob/master/pyproject.toml

# https://microsoft.github.io/pyright/#/configuration
[tool.pyright]
typeCheckingMode = "off"
reportMissingImports = "error"
reportUnboundVariable = "error"
reportGeneralTypeIssues = "error"
reportUnnecessaryTypeIgnoreComment = "error"
reportPossiblyUnboundVariable = "warning"
reportOptionalMemberAccess = "none"
reportOptionalSubscript = "none"
include = ["ci/", "tests/"]
ignore = [ ]
pythonVersion = "3.12"
pythonPlatform = "Linux"

# https://docs.astral.sh/ruff/configuration
[tool.ruff]
include = ["pyproject.toml", "ci/**/*.py", "tests/**/*.py"]
exclude = [ ]
target-version = "py312"
line-length = 120

# https://docs.astral.sh/ruff/rules
[tool.ruff.lint]
preview = true
select = [
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "COM", # flake8-commas
    "E", "W", # pycodestyle errors/warnings
    "F", # Pyflakes
    "FA", # flake8-future-annotations
    "FLY", # flynt
    "G", # flake8-logging-format
    "I", # isort
    "INP", # flake8-no-pep420
    "INT", # flake8-gettext
    "ISC", # flake8-implicit-str-concat
    "N", # pep8-naming
    "NPY002", # numpy-legacy-random
    "PERF", # Perflint
    "PGH", # pygrep-hooks
    "PIE", # misc lints
    "PL", # pylint
    "PYI", # flake8-pyi
    "Q", # flake8-quotes
    "RET", # flake8-return
    "RUF", # Ruff-specific
    "S102", # flake8-bandit: exec-builtin
    "T10", # flake8-debugger
    "TCH", # type-checking imports
    "TID", # flake8-tidy-imports
    "UP", # pyupgrade
    "YTT", # flake8-2020
]
ignore = [
    # intentionally disabled
    "E203", # space before : (needed for how black formats slicing)
    "ISC001", # single-line-implicit-string-concatenation (ruff format wants this disabled)
    "G004", # Logging statement uses f-string (convenient, and we don't care about performance too much)
    # various limits and unimportant warnings
    "E501", # Line too long
    "E741", # Ambiguous variable name: `l`
    "PLR0904", # Too many public methods (56 > 20)
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments in function definition (6 > 5)
    "PLR0915", # Too many statements
    "PLR0917", # Too many positional arguments (10/5)
    "PLR0917", # Too many positional arguments (7/5)
    "PLR0911", # Too many return statements (9 > 6)
    "PLR0914", # Too many local variables (19/15)
    "PLR2004", # Magic value used in comparison
    # "W503", # not yet implemented; line break before binary operator
    # "W504", # not yet implemented; line break after binary operator
    # TODO
    "B006", # Do not use mutable data structures for argument defaults
    "COM812", # Trailing comma missing
    "INP001", # File `ods_ci/tests/Resources/Page/ODH/JupyterHub/jupyter-helper.py` is part of an implicit namespace package. Add an `__init__.py`.
    "N806", # Variable `outputText` in function should be lowercase
    "N813", # Camelcase `ElementTree` imported as lowercase `et`
    "N816", # Variable `rotatingHandler` in global scope should not be mixedCase
    "N999", # Invalid module name: 'createPolarionTestRun'
    "PERF401", # Use a list comprehension to create a transformed list
    "PLC1901", # `filter_value != ""` can be simplified to `filter_value` as an empty string is falsey
    "PLR6201", # Use a `set` literal when testing for membership
    "PLR6301", # Method `_render_template` could be a function, class method, or static method
    "PLW1514", # `codecs.open` in text mode without explicit `encoding` argument
    "PLW2901", # `for` loop variable `tag_it` overwritten by assignment target
    "RET501", # Do not explicitly `return None` in function if it is the only possible return value
    "RET504", # Unnecessary assignment to `names` before `return` statement
    "RET505", # Unnecessary `else` after `return` statement
    "UP015", # Unnecessary open mode parameters
    "UP031", # format specifiers instead of percent format
    "UP032", # Use f-string instead of `format` call
    "RET507", # Unnecessary `else` after `continue` statement
    "RET508", # Unnecessary `elif` after `break` statement
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# https://docs.astral.sh/ruff/formatter
[tool.ruff.format]
line-ending = "lf"
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false

docstring-code-format = true
docstring-code-line-length = "dynamic"