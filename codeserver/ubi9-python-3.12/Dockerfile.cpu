#########################
# configuration args    #
#########################
ARG BASE_IMAGE

####################
# rpm-base         #
####################
# e.g., registry.access.redhat.com/ubi9/python-312:latest
FROM ${BASE_IMAGE} AS rpm-base

USER root
WORKDIR /root

ENV HOME=/root

ARG CODESERVER_SOURCE_CODE=codeserver/ubi9-python-3.12

ARG NODE_VERSION=20

ARG CODESERVER_VERSION=v4.98.0

COPY ${CODESERVER_SOURCE_CODE}/get_code_server_rpm.sh .

# create dummy file to ensure this stage is awaited before installing rpm
RUN ./get_code_server_rpm.sh && touch /tmp/control

#######################
# wheel caching stage #
#######################
FROM registry.access.redhat.com/ubi9/python-312:latest AS whl-cache

USER root
WORKDIR /root

ENV HOME=/root

ARG CODESERVER_SOURCE_CODE=codeserver/ubi9-python-3.12

# copy requirements and scripts
COPY ${CODESERVER_SOURCE_CODE}/pylock.toml ./
COPY ${CODESERVER_SOURCE_CODE}/devel_env_setup.sh ./

# This stage installs (builds) all the packages needed and caches it in uv-cache
# Important: Since HOME & USER for the python-312 has been changed,
#            we need to ensure the same cache directory is mounted in
#            the final stage with the necessary permissions to consume from cache
RUN --mount=type=cache,target=/root/.cache/uv \
    pip install --no-cache uv && \
    # the devel script is ppc64le specific - sets up build-time dependencies
    source ./devel_env_setup.sh && \
    # This may have to download and compile some dependencies, and as we don't lock requirements from `build-system.requires`,
    #  we often don't know the correct hashes and `--require-hashes` would therefore fail on non amd64, where building is common.
    uv pip install --strict --no-deps --refresh --no-config --no-progress --verify-hashes --compile-bytecode --index-strategy=unsafe-best-match --requirements=./pylock.toml

# dummy file to make image build wait for this stage
RUN touch /tmp/control

####################
# cpu-base         #
####################
FROM ${BASE_IMAGE} AS cpu-base

WORKDIR /opt/app-root/bin

# OS Packages needs to be installed as root
USER 0

# Inject the official UBI 9 repository configuration into the AIPCC base image.
# The Quay-based AIPCC image is "repo-less" by default (https://gitlab.com/redhat/rhel-ai/core/base-images/app#repositories), so dnf cannot upgrade or install packages.
# By copying ubi.repo from the public UBI 9 image, we enable package management for upgrades and installations.
COPY --from=registry.access.redhat.com/ubi9/ubi /etc/yum.repos.d/ubi.repo /etc/yum.repos.d/ubi.repo

# upgrade first to avoid fixable vulnerabilities begin
RUN dnf -y upgrade --refresh --best --nodocs --noplugins --setopt=install_weak_deps=0 --setopt=keepcache=0 \
    && dnf clean all -y
# upgrade first to avoid fixable vulnerabilities end

# Install useful OS packages
RUN dnf install -y perl mesa-libGL skopeo && dnf clean all && rm -rf /var/cache/yum

# (ARCH-ppc64le): since wheels are compiled from source, we need shared libs available at runtime
RUN --mount=type=cache,from=whl-cache,source=/root/OpenBLAS,target=/OpenBlas,rw \
    bash -c ' \
        if [[ $(uname -m) == "ppc64le" ]]; then \
            dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm; \
            dnf install -y lcms2 libraqm libimagequant openjpeg2; \
            PREFIX=/usr/ make install -C /OpenBlas; \
        fi '

# Other apps and tools installed as default user
USER 1001

# Install micropipenv and uv to deploy packages from requirements.txt begin
RUN pip install --no-cache-dir -U "micropipenv[toml]==1.9.0" "uv==0.8.12"
# Install micropipenv and uv to deploy packages from requirements.txt end

# Install the oc client begin
RUN curl -L https://mirror.openshift.com/pub/openshift-v4/$(uname -m)/clients/ocp/stable/openshift-client-linux.tar.gz \
        -o /tmp/openshift-client-linux.tar.gz && \
    tar -xzvf /tmp/openshift-client-linux.tar.gz oc && \
    rm -f /tmp/openshift-client-linux.tar.gz
# Install the oc client end

####################
# codeserver       #
####################
FROM cpu-base AS codeserver

ARG TARGETOS TARGETARCH

ARG CODESERVER_SOURCE_CODE=codeserver/ubi9-python-3.12
ARG CODESERVER_VERSION=v4.98.0

LABEL name="odh-notebook-code-server-ubi9-python-3.12" \
      summary="code-server image with python 3.12 based on UBI 9" \
      description="code-server image with python 3.12 based on UBI9" \
      io.k8s.display-name="code-server image with python 3.12 based on UBI9" \
      io.k8s.description="code-server image with python 3.12 based on UBI9" \
      authoritative-source-url="https://github.com/opendatahub-io/notebooks" \
      io.openshift.build.commit.ref="main" \
      io.openshift.build.source-location="https://github.com/opendatahub-io/notebooks/tree/main/codeserver/ubi9-python-3.12" \
      io.openshift.build.image="quay.io/opendatahub/workbench-images:codeserver-ubi9-python-3.12"

USER 0

WORKDIR /opt/app-root/bin

# Install useful OS packages
RUN dnf install -y jq git-lfs libsndfile && dnf clean all && rm -rf /var/cache/yum

# wait for rpm-base stage (rpm builds for ppc64le)
COPY --from=rpm-base /tmp/control /dev/null

# Install code-server
# Note: Use cache mounts, bind mounts fail on konflux
# https://redhat-internal.slack.com/archives/C04PZ7H0VA8/p1755628065772589?thread_ts=1755597929.335999&cid=C04PZ7H0VA8
RUN --mount=type=cache,from=rpm-base,source=/tmp/,target=/code-server-rpm/,rw \
    # EXPLANATION: dnf installation produces an "unsigned rpm" error from Konflux (Conforma)
    #  since we're building rpm from source, we will simply unpack it over /
    # dnf install -y "/code-server-rpm/code-server-${CODESERVER_VERSION/v/}-${TARGETARCH}.rpm"
    # dnf -y clean all --enablerepo='*'
    dnf install -y cpio && dnf -y clean all && \
    cd / && rpm2cpio "/code-server-rpm/code-server-${CODESERVER_VERSION/v/}-${TARGETARCH}.rpm" | cpio -idmv

COPY --chown=1001:0 ${CODESERVER_SOURCE_CODE}/utils utils/

# Create and intall the extensions though build-time on a temporary directory. Later this directory will copied on the `/opt/app-root/src/.local/share/code-server/extensions` via run-code-server.sh file when it starts up.
RUN mkdir -p /opt/app-root/extensions-temp && \
    code-server --install-extension /opt/app-root/bin/utils/ms-python.python-2025.2.0.vsix --extensions-dir /opt/app-root/extensions-temp && \
    code-server --install-extension /opt/app-root/bin/utils/ms-toolsai.jupyter-2025.2.0.vsix --extensions-dir /opt/app-root/extensions-temp

# Install NGINX to proxy code-server and pass probes check
ENV NGINX_VERSION=1.24 \
    NGINX_SHORT_VER=124 \
    NGINX_CONFIGURATION_PATH=${APP_ROOT}/etc/nginx.d \
    NGINX_CONF_PATH=/etc/nginx/nginx.conf \
    NGINX_DEFAULT_CONF_PATH=${APP_ROOT}/etc/nginx.default.d \
    NGINX_CONTAINER_SCRIPTS_PATH=/usr/share/container-scripts/nginx \
    NGINX_APP_ROOT=${APP_ROOT} \
    NGINX_LOG_PATH=/var/log/nginx \
    NGINX_PERL_MODULE_PATH=${APP_ROOT}/etc/perl

# Modules does not exist
RUN dnf install -y https://download.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm && \
    INSTALL_PKGS="bind-utils nginx nginx-mod-stream nginx-mod-http-perl fcgiwrap initscripts chkconfig supervisor" && \
    dnf install -y --setopt=tsflags=nodocs $INSTALL_PKGS && \
    rpm -V $INSTALL_PKGS && \
    dnf -y clean all --enablerepo='*'

COPY --chown=1001:0 ${CODESERVER_SOURCE_CODE}/supervisord/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Copy extra files to the image.
COPY --chown=1001:0 ${CODESERVER_SOURCE_CODE}/nginx/root/ /

# Changing ownership and user rights to support following use-cases:
# 1) running container on OpenShift, whose default security model
#    is to run the container under random UID, but GID=0
# 2) for working root-less container with UID=1001, which does not have
#    to have GID=0
# 3) for default use-case, that is running container directly on operating system,
#    with default UID and GID (1001:0)
# Supported combinations of UID:GID are thus following:
# UID=1001 && GID=0
# UID=<any>&& GID=0
# UID=1001 && GID=<any>
RUN sed -i -f ${NGINX_APP_ROOT}/nginxconf.sed ${NGINX_CONF_PATH} && \
    mkdir -p ${NGINX_APP_ROOT}/etc/nginx.d/ && \
    mkdir -p ${NGINX_APP_ROOT}/etc/nginx.default.d/ && \
    mkdir -p ${NGINX_APP_ROOT}/api/ && \
    mkdir -p ${NGINX_CONTAINER_SCRIPTS_PATH}/nginx-start && \
    mkdir -p ${NGINX_LOG_PATH} && \
    mkdir -p ${NGINX_PERL_MODULE_PATH} && \
    chown -R 1001:0 ${NGINX_CONF_PATH} && \
    chown -R 1001:0 ${NGINX_APP_ROOT}/etc && \
    chown -R 1001:0 ${NGINX_CONTAINER_SCRIPTS_PATH}/nginx-start && \
    chown -R 1001:0 /var/lib/nginx /var/log/nginx /run && \
    chmod    ug+rw  ${NGINX_CONF_PATH} && \
    chmod -R ug+rwX ${NGINX_APP_ROOT}/etc && \
    chmod -R ug+rwX ${NGINX_CONTAINER_SCRIPTS_PATH}/nginx-start && \
    chmod -R ug+rwX /var/lib/nginx /var/log/nginx /run && \
    rpm-file-permissions && \
    # Ensure the temporary directory and target directory have the correct permissions
    mkdir -p /opt/app-root/src/.local/share/code-server/extensions && \
    mkdir -p /opt/app-root/src/.local/share/code-server/coder-logs && \
    chown -R 1001:0 /opt/app-root/src/.local/share/code-server && \
    chown -R 1001:0 /opt/app-root/extensions-temp && \
    chown -R 1001:0 /opt/app-root/src/.config/code-server

## Configure nginx
COPY ${CODESERVER_SOURCE_CODE}/nginx/serverconf/ /opt/app-root/etc/nginx.default.d/
COPY ${CODESERVER_SOURCE_CODE}/nginx/httpconf/ /opt/app-root/etc/nginx.d/
COPY ${CODESERVER_SOURCE_CODE}/nginx/api/ /opt/app-root/api/

# Launcher
COPY --chown=1001:0 ${CODESERVER_SOURCE_CODE}/run-code-server.sh ${CODESERVER_SOURCE_CODE}/run-nginx.sh ./

ENV SHELL=/bin/bash

ENV PYTHONPATH=/opt/app-root/bin/python3

# Install useful packages from requirements.txt
COPY ${CODESERVER_SOURCE_CODE}/pylock.toml ./

# wait for whl-cache stage (builds uv cache)
COPY --from=whl-cache /tmp/control /dev/null

# Install packages and cleanup
# install packages as USER 0 (this will allow us to consume uv cache)
RUN --mount=type=cache,target=/root/.cache/uv \
    echo "Installing softwares and packages" && \
    # we can ensure wheels are consumed from the cache only by restricting internet access for uv install with '--offline' flag
    uv pip install --offline --cache-dir /root/.cache/uv --requirements=./pylock.toml && \
    # Note: debugpy wheel availabe on pypi (in uv cache) is none-any but bundles amd64.so files
    #       Build debugpy from source instead
    uv pip install --no-cache git+https://github.com/microsoft/debugpy.git@v$(grep -A1 '\"debugpy\"' ./pylock.toml | grep -Eo '\b[0-9\.]+\b') && \
    # change ownership to default user (all packages were installed as root and has root:root ownership \
    chown -R 1001:0 /opt/app-root/lib

USER 1001

# Fix permissions to support pip in Openshift environments
RUN chmod -R g+w /opt/app-root/lib/python3.12/site-packages && \
    fix-permissions /opt/app-root -P

WORKDIR /opt/app-root/src

CMD ["/opt/app-root/bin/run-code-server.sh"]
